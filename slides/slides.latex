% Copyright (c) 2016, Christopher Mark Gore,
% Soli Deo Gloria,
% All rights reserved.
%
% 2317 South River Road, Saint Charles, Missouri 63303 USA.
% Web: http://cgore.com
% Email: cgore@cgore.com
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%
%     * Neither the name of Christopher Mark Gore nor the names of other
%       contributors may be used to endorse or promote products derived from
%       this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

\documentclass{seminar}

\usepackage{fixltx2e} % Bugfixes for LaTeX 2e
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{graphicx}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{librebaskerville} % Baskerville font
\usepackage{amsfonts}
\usepackage{listings}
\usepackage[dvips]{pstricks}
\usepackage{relsize}
\usepackage{textcomp}
\usepackage[normalem]{ulem}
\usepackage{wasysym}
\usepackage{dirtree}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{pifont}
\usepackage{tikz}

\usetikzlibrary{chains,matrix,positioning,shapes,shadows,arrows,arrows.meta}

\tikzstyle{arrow} = [thick,->,>=stealth]
\tikzstyle{roundangle} = [rectangle, rounded corners, text centered, draw=black, fill=blue!10]
\tikzstyle{cons} = [
  rectangle split,
  rectangle split horizontal,
  rectangle split parts = 2,
  rounded corners,
  draw=black,
  fill=white,
]
\newcommand{\carcdr}[1]{\node (#1) [cons] {car \nodepart{second} cdr};}
\newcommand{\dottedcons}[1]{\node (#1) [cons] {. \nodepart{second} .};}
\newcommand{\dottedconsX}[2]{\node (#1) [cons,#2] {. \nodepart{second} .};}
\newcommand{\dottedconsB}[2]{\dottedconsX{#1}{below of=#2}}
\newcommand{\dottedconsLB}[2]{\dottedconsX{#1}{below left of = #2}}
\newcommand{\dottedconsRB}[2]{\dottedconsX{#1}{below right of = #2}}
\newcommand{\roundangle}[2]{\node (#1) [roundangle] {#2};}
\newcommand{\roundangleX}[3]{\node (#1) [roundangle,#3] {#2};}
\newcommand{\carline}[2]{\draw [arrow] (#1.one south) -- (#2);}
\newcommand{\carlineX}[3]{\draw [arrow,#3] (#1.one south) -- (#2);}
\newcommand{\cdrline}[2]{\draw [arrow] (#1.two south) -- (#2);}

\usepackage{semcolor,slidesec}
\input{seminar.bug}
\input{seminar.bg2}
% \input{seminar.bg3} % TODO: why is this missing on OSX?

\definecolor{fillcolor}{rgb}{0.9,0.95,1.0}
\definecolor{linecolor}{rgb}{0.8,0.85,0.9}
\slideframe[\psset{fillcolor=fillcolor,linecolor=linecolor}]{scshadow}

\newcommand{\hc}{Blue}
\newcommand{\h}[1]{\slideheading{\textcolor{\hc}{#1}}}
\newcommand{\tq}[1]{\textcolor{Green}{\textbf{#1}}}
\newcommand{\tbd}[1]{\textcolor{Blue}{\textit{#1}}}
\newcommand{\TODO}{{\Huge \textcolor{Red}{\textbf{{TO DO}}}}}

\definecolor{commentcolor}{rgb}{0.1,0.1,0.8}
\definecolor{identifiercolor}{rgb}{0.3,0.3,0.3}
\definecolor{keywordcolor}{rgb}{0.1,0.5,0.1}
\definecolor{cexcolor}{rgb}{0.25,0.25,0.4}
\lstset{
  basicstyle=\ttfamily,
  language=Ruby,
  escapeinside={\%*}{*)},
  commentstyle=\itshape\color{commentcolor},
  identifierstyle=\color{identifiercolor},
  keywordstyle=\color{keywordcolor},
  upquote=true,
  numbers=left,
  numberstyle=\tiny\color{commentcolor},
  numbersep=5pt
}
\newcommand{\cex}[1]{\textcolor{cexcolor}{\textit{#1}}}

\newcommand{\shell}[1]{\texttt{\textbf{{\textcolor{Blue} \$}} #1}}

\newcommand{\xmark}{\textcolor{Red}{\ding{55}}}
\newcommand{\cmark}{\textcolor{Green}{\ding{51}}}

\newcommand{\SlideSection}[1]
{
  \begin{center}
    \textcolor{\hc}{\textbf{\emph{\Huge{#1}}}}
  \end{center}
}


\newcommand{\fullSlideImage}[1]{
  \begin{center}
    \includegraphics[width=4in,height=2.25in,keepaspectratio=true]{#1}
  \end{center}
}

\newcommand{\halfSlideImage}[1]{
  \includegraphics[width=2in,height=2.25in,keepaspectratio=true]{#1}
}

\newcommand{\rightSideImageName}{you-must-supply-the-image-name.eps}
\newenvironment{rightSideImage}[1]
{
  \renewcommand{\rightSideImageName}{#1}
  \begin{tabular}{lr}
    \begin{minipage}[b]{2in}
}
{
    \end{minipage}
    &
    \halfSlideImage{\rightSideImageName}
  \end{tabular}
}

\newcommand{\leftSideImageName}{you-must-supply-the-image-name.eps}
\newenvironment{leftSideImage}[1]
{
  \renewcommand{\leftSideImageName}{#1}
  \begin{tabular}{lr}
    \halfSlideImage{\leftSideImageName}
    &
    \begin{minipage}[b]{2in}
      \raggedright
}
{
    \end{minipage}
  \end{tabular}
}

\def\dout{\bgroup
 \markoverwith{\lower-0.2ex\hbox
 {\kern-.03em\vbox{\hrule width.2em\kern0.45ex\hrule}\kern-.03em}}%
 \ULon}
\MakeRobust\dout

\newpagestyle{cgore}{}{Chris Gore\hfil\thepage\hfil\texttt{cgore.com}}
\pagestyle{cgore}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\title{\psshadowbox{Conses in Ruby: So Much More Than Lists}}
\author{Christopher Mark Gore\\
  \texttt{cgore.com}}
\date{Monday, September 12, {\smaller AD} 2016} % textsc doesn't seem to work for Baskerville.

\begin{document}

\raggedslides[0mm]


\begin{slide}
  \color{\hc}

  \begin{center}
    \includegraphics[height=1.25in]{stlruby.eps}
  \end{center}

  \maketitle

  \color{Black}
\end{slide}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{slide}
  \h{Ruby is my \dout{most} \dout{second} third favorite programming language of all time.}


  \begin{enumerate}
  \item My own super-awesome programming language, Teepee \textit{(but it's not that awesome just yet)}
  \item Common Lisp
  \item Ruby
  \item Clojure
  \item[] .
  \item[] .
  \item[] . \setcounter{enumi}{998}
  \item Java
  \end{enumerate}
\end{slide}


\begin{slide}
  \h{Nearly every programming language has some way to do things to a list/array/vector/whatever of things.}

  \fullSlideImage{to-do-list.eps}
\end{slide}

\begin{slide}
  \h{Ruby has arrays.}

\begin{lstlisting}
a = [1,2,3,4,5]
a.class # Array
a.length # 5
a.first # 1
a.map {|i| i*2} # [2,4,6,8,10]
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Common Lisp prefers linked lists.}

\begin{lstlisting}[language=Lisp]
(setf a '(1 2 3 4 5))
(class-of a) ; #<BUILT-IN-CLASS COMMON-LISP:CONS>
(length a) ; 5
(first a) ; 1
(mapcar (lambda (i) (* 2 i)) a) ; '(2 4 6 8 10)  
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{But Common Lisp also has vectors, which are basically the same as Ruby arrays.}

\begin{lstlisting}[language=Lisp]
(let v (vector 1 2 3 4 5))
(class-of v)
;; #<BUILT-IN-CLASS COMMON-LISP:SIMPLE-VECTOR>
(length v) ; 5
(elt v 0) ; 1
(map 'vector (lambda (i) (* 2 i)) v)
;; #(2 4 6 8 10)
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{I'm wanting to add lisp-style lists to my language.
    \textit{(There's no lists or arrays or anything like that yet.)}}

  \fullSlideImage{flint-knife.eps}
\end{slide}


\begin{slide}
  \h{It's written in Ruby, so I'm writing a Cons gem!}

\begin{lstlisting}
require 'cons'
c = [1,2,3,4,5].to_cons
c.class # Cons
c.length # 5
c.first # 1
c.map {|i| i*2} # Cons.list 2,4,6,8,10
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Once the gem is complete, I can then use it in the language's implementation.}

  \fullSlideImage{shave-that-yak.eps}
\end{slide}


\begin{slide}
  \h{Just remember, yak shaving is only a bad thing if you are talking to a manager.}

  \fullSlideImage{engineers-boat.eps}
\end{slide}


\begin{slide}
  \h{Remember linked lists?}

  \begin{center}
    \begin{tikzpicture}
      \matrix [
        row sep = 1em,
        column sep = 3.5em
      ] {
        \roundangle{a}{Orange} &
        \roundangle{b}{Apple} &
        \roundangle{c}{Banana} &
        \node (d) {...}; \\
      };
      \draw [arrow] (a) -- node[above] {next} (b);
      \draw [arrow] (b) -- node[above] {next} (c);
      \draw [arrow] (c) -- node[above] {next} (d);
    \end{tikzpicture}
  \end{center}

  We can do this something like this in Ruby:

  \begin{lstlisting}
class LinkedList
  attr_accessor :data, :next
  def initialize data, next
    @data, @next = data, next
    ...
  end
  ...
end
  \end{lstlisting}
\end{slide}


\begin{slide}
  \h{Well, they don't work like that at all in Lisp.}

  \fullSlideImage{mccarthy.eps}
\end{slide}



\begin{slide}
  \h{Lisp uses conses instead.\\
    The data isn't in the cell, it's two pointers.}

  \begin{center}
    \begin{tikzpicture}
      \matrix [
        row sep = 2em,
        column sep = 2em
      ] {
        \carcdr{a} &
        \carcdr{b} &
        \carcdr{c} &
        \node (d) {...}; \\
        \roundangle{a_data}{Orange}; &
        \roundangle{b_data}{Apple}; &
        \roundangle{c_data}{Banana}; &
        \node (d_data) {...}; \\
      };
      \draw [arrow] (a.one south) -- (a_data);
      \draw [arrow] (b.one south) -- (b_data);
      \draw [arrow] (c.one south) -- (c_data);
      \draw [arrow] (a) -- (b);
      \draw [arrow] (b) -- (c);
      \draw [arrow] (c) -- (d);
    \end{tikzpicture}
  \end{center}
\end{slide}


\begin{slide}
  \h{Say hello to the IBM Type 704\\
    \texttt{CAR}: Contents of the Address Register\\
    \texttt{CDR}: Contents of the Data Register}

  \fullSlideImage{IBM-704.eps}
\end{slide}


\begin{slide}
  \h{For similar reasons, every Linux box thinks your on one of these:}

  \fullSlideImage{vt100.eps}
\end{slide}


\begin{slide}
  \h{Why two pointers?\\
    Because you can make ring buffers.}

  \begin{center}
    \begin{tikzpicture}
      \matrix [
        row sep = 1em,
        column sep = 1em
      ] {
        \dottedcons{a}; & \roundangle{aa}{Apple}; \\
        \dottedcons{b}; & \roundangle{ba}{Ball}; \\
        \dottedcons{c}; & \roundangle{ca}{Cat}; \\
        \dottedcons{d}; & \roundangle{da}{Dog}; \\
        \dottedcons{e}; & \roundangle{ea}{Elephant}; \\
      };
      \draw [arrow] (a.two south) to (b);
      \draw [arrow] (b.two south) to (c);
      \draw [arrow] (c.two south) to (d);
      \draw [arrow] (d.two south) to (e);

      \draw [red,arrow] (e.two south) to [out=-90, in=180, looseness=1] (a);

      \draw [blue,arrow] (a.one north) to [out=90] (aa);
      \draw [blue,arrow] (b.one north) to [out=90] (ba);
      \draw [blue,arrow] (c.one north) to [out=90] (ca);
      \draw [blue,arrow] (d.one north) to [out=90] (da);
      \draw [blue,arrow] (e.one north) to [out=90] (ea);
    \end{tikzpicture}
  \end{center}
\end{slide}


\begin{slide}
  \h{Why two pointers?\\
    Because you can make doubly-linked lists.}

  \begin{center}
    \begin{tikzpicture}
      \matrix [
        row sep = 1em,
        column sep = 1em
      ] {
        & & \node(the_begin) {\texttt{NIL}}; \\
        \roundangle{av}{Apple};    & \dottedcons{a}; & \dottedcons{al}; \\
        \roundangle{bv}{Ball};     & \dottedcons{b}; & \dottedcons{bl}; \\
        \roundangle{cv}{Cat};      & \dottedcons{c}; & \dottedcons{cl}; \\
        \roundangle{dv}{Dog};      & \dottedcons{d}; & \dottedcons{dl}; \\
        \roundangle{ev}{Elephant}; & \dottedcons{e}; & \dottedcons{el}; \\
        & & \node(the_end) {\texttt{NIL}}; \\
      };

      \draw [arrow] (a) to (al);
      \draw [arrow] (b) to (bl);
      \draw [arrow] (c) to (cl);
      \draw [arrow] (d) to (dl);
      \draw [arrow] (e) to (el);

      \draw [purple,arrow] (al.two south) to (b);
      \draw [purple,arrow] (bl.two south) to (c);
      \draw [purple,arrow] (cl.two south) to (d);
      \draw [purple,arrow] (dl.two south) to (e);
      \draw [purple,arrow] (el.two south) to (the_end);

      \draw [blue,arrow] (al.one north) to (the_begin);
      \draw [blue,arrow] (bl) to (a);
      \draw [blue,arrow] (cl) to (b);
      \draw [blue,arrow] (dl) to (c);
      \draw [blue,arrow] (el) to (d);

      \draw [arrow] (a) to (av);
      \draw [arrow] (b) to (bv);
      \draw [arrow] (c) to (cv);
      \draw [arrow] (d) to (dv);
      \draw [arrow] (e) to (ev);
    \end{tikzpicture}
  \end{center}
\end{slide}


\begin{slide}
  \h{Why two pointers?\\
    Because you can make alists.}

  \begin{center}
    \begin{tikzpicture}
      \matrix [
        row sep = 1em,
        column sep = 1em
      ] {
        \dottedcons{a}; & \dottedcons{ac}; & \roundangle{aa}{A}; & \roundangle{ad}{Apple}; \\
        \dottedcons{b}; & \dottedcons{bc}; & \roundangle{ba}{B}; & \roundangle{bd}{Ball}; \\
        \dottedcons{c}; & \dottedcons{cc}; & \roundangle{ca}{C}; & \roundangle{cd}{Cat}; \\
        \dottedcons{d}; & \dottedcons{dc}; & \roundangle{da}{D}; & \roundangle{dd}{Dog}; \\
        \dottedcons{e}; & \dottedcons{ec}; & \roundangle{ea}{E}; & \roundangle{ed}{Elephant}; \\
        \node (the_end) {\texttt{NIL}}; \\
      };
      \draw [arrow] (a.two south) to (b);
      \draw [arrow] (b.two south) to (c);
      \draw [arrow] (c.two south) to (d);
      \draw [arrow] (d.two south) to (e);
      \draw [arrow] (e.two south) to (the_end);

      \draw [blue,arrow] (a.one north) to [out=90] (ac);
      \draw [blue,arrow] (b.one north) to [out=90] (bc);
      \draw [blue,arrow] (c.one north) to [out=90] (cc);
      \draw [blue,arrow] (d.one north) to [out=90] (dc);
      \draw [blue,arrow] (e.one north) to [out=90] (ec);
      
      \draw [green,arrow] (ac.two north) to [out=30, in=150] (ad);
      \draw [green,arrow] (bc.two north) to [out=30, in=150] (bd);
      \draw [green,arrow] (cc.two north) to [out=30, in=150] (cd);
      \draw [green,arrow] (dc.two north) to [out=30, in=150] (dd);
      \draw [green,arrow] (ec.two north) to [out=30, in=150] (ed);

      \draw [purple,arrow] (ac.one south) to [out=-30, in=-150] (aa);
      \draw [purple,arrow] (bc.one south) to [out=-30, in=-150] (ba);
      \draw [purple,arrow] (cc.one south) to [out=-30, in=-150] (ca);
      \draw [purple,arrow] (dc.one south) to [out=-30, in=-150] (da);
      \draw [purple,arrow] (ec.one south) to [out=-30, in=-150] (ea);
    \end{tikzpicture}
  \end{center}
\end{slide}


\begin{slide}
  \h{Alists, \textit{association lists}, are how Lisp historically would create
    things we'd typically use hash maps for today.}

  \begin{lstlisting}[language=Lisp]
'((A . Apple)
  (B . Ball)
  (C . Cat)
  (D . Dog)
  (E . Elephant))
  \end{lstlisting}
\end{slide}


\begin{slide}
  \h{Why two pointers?\\
    Because then you can do this:}

  \begin{center}
    \begin{tikzpicture}
      \dottedcons{a}

      \dottedconsLB{b}{a}
      \dottedconsRB{c}{a}
      \carline{a}{b}
      \cdrline{a}{c}

      \dottedconsLB{d}{b}
      \dottedconsB{e}{b}
      \dottedconsB{f}{c}
      \dottedconsRB{g}{c}
      \carline{b}{d}
      \cdrline{b}{e}
      \carline{c}{f}
      \cdrline{c}{g}

      \draw [arrow] (d.one north) to [bend left] (a.west);
      \draw [arrow] (d.two south) to (e.west);
      \draw [arrow] (e.east) to (f.west);
      \draw [arrow] (e.one south) to [out=-135, in=-45, looseness=5] (e.two south);
      \draw [arrow] (f.east) to (g.one south);
      \draw [arrow] (f.one south) to [out=-135, in=-45, looseness=5] (f.two south);
      \draw [arrow] (g.two north) to [bend right] (a.east);
    \end{tikzpicture}
  \end{center}
\end{slide}


\begin{slide}
  \h{Sometimes, exploring your data structures should be an adventure!}
  
  \fullSlideImage{twisty-passages.eps}
\end{slide}


\begin{slide}
  \h{Why do I want conses?}

  \fullSlideImage{big-data.eps}
\end{slide}


\begin{slide}
  \h{Big Data}

  \begin{itemize}
  \item There's no reason why the \texttt{car} or the \texttt{cdr} need to point
    to local memory.
  \item Why not point them to the hard drive?
  \item Why not point them to S3?
  \item Why not have something cool that points to local memory, or the hard
    drive, or S3, at it's discretion?
  \end{itemize}
\end{slide}


\begin{slide}
  \h{Then we can have ninety-nine quintillion kitten pictures in a big list!}

  \fullSlideImage{kittens.eps}
\end{slide}


\begin{slide}
  \h{We can easily do \texttt{Cons} in Ruby}

  \begin{lstlisting}
class Cons
  attr_accessor :car, :cdr
  def initialize car, cdr
    @car, @cdr = car, cdr
    ...
  end
  ...
end
  \end{lstlisting}
\end{slide}


\begin{slide}
  \h{I've got a very basic implementation.}

  \begin{lstlisting}
require 'cons' # Yay gems!
Cons.new 1, nil # Basic constructor
Cons[1,nil] # Or use the brackets
Cons[1] # nil is default
Cons[1,Cons[2,Cons[3]]] # a linked list
Cons.from_array [1,2,3] # from an array
[1,2,3].to_cons # monkey patching
  \end{lstlisting}
\end{slide}


\begin{slide}
  \h{Comparisons, \texttt{car}, and \texttt{cdr}}
  \begin{lstlisting}
c = [1,2,3,4,5].to_cons
c.length # 5, assumes a linked list
d = [1,2,3,4,5].to_cons
c == d # true, but they're not identical
c.car # 1
c.cdr.car # 2
c.cdr.cdr.car # 3
c.cdr.cdr.cdr.car # 4
c.cdr.cdr.cdr.cdr.car # 5
  \end{lstlisting}
\end{slide}


\begin{slide}
  \h{Because sometimes English is easier:}

  \begin{lstlisting}
c = [1,2,3,4,5].to_cons
c.first # 1
c.second # 2
c.third # 3
c.fourth # 4
c.fifth # 5
  \end{lstlisting}
\end{slide}


\begin{slide}
  \h{Umm, this is a thing?}

  \begin{lstlisting}
c = [1,2,3,4,5].to_cons
c.car # 1
c.cdar # 2
c.cddar # 3
c.cdddar # 4
c.cddddar # What?  That's crazy talk!
  \end{lstlisting}
\end{slide}


\begin{slide}
  \h{It's easy to get the \texttt{cdr}'s too.}

  \begin{lstlisting}
c = [1,2,3,4,5].to_cons
c.cdr.to_a # 2,3,4,5]
c.rest.to_a # [2,3,4,5]
c.cddr.to_a # [3,4,5]
c.cdddr.to_a # [4,5]
c.cddddr.to_a # [5]
  \end{lstlisting}
\end{slide}


\begin{slide}
  \h{You can easily make assignments.}

  \begin{lstlisting}
c = [1,2,3,4,5].to_cons
c.car # 1
c.car = "wow"
c.car # "wow"
c.cdar = "hey"
c.cddar = "cool"
c.to_a # ["wow","hey","cool",4,5]
  \end{lstlisting}
\end{slide}


\begin{slide}
  \h{Work in progress \textellipsis}

  \begin{itemize}
  \item Implement arbitrary \texttt{c*r} forms via \texttt{method\_missing}?
    Maybe not?
  \item Smarter pretty printer.
  \item Lots of stuff for alists.
  \item Lots of stuff for lists as sets.
  \item Lots of other stuff from Common Lisp.
  \item Go to the hard drive!
  \item Go to S3!
  \end{itemize}
\end{slide}
  
\begin{slide}
  \SlideSection{Questions?}
\end{slide}

\end{document}
